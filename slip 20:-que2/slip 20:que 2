/*There are lists where new elements are always appended at the end of the
list. The list can be implemented as a circular list with the external pointer
pointing to the last element of the list. Implement singly linked circular list of
integers with append and display operations. The operation append(L, n),
appends to the end of the list, n integers either accepted from user or randomly
generated. */




#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
	int data;
	struct node *next;
	}node;
	node *create(node *list)
	{
	node *temp,*newnode;
	int i,n;
	printf("enter limit:");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
	newnode=(node*)malloc(sizeof(node));
	printf("enter value:");
	scanf("%d",&newnode->data);
	if(list==NULL)
	{
	list=temp=newnode;
	newnode->next=list;
	}
	else
	{
	temp->next=newnode;
	temp=newnode;
	newnode->next=list;
	}
}
	return list;
	}
	void disp(node *list)
	{
	node *temp;
	temp=list;
	do
	{
	printf("%d\t",temp->data);
	temp=temp->next;
	}while(temp!=list);
	}



node *append(node *list,int n)
{
	int i,num;
	node *newnode,*temp;
	for(temp=list;temp->next!=list;temp=temp->next);
	for(i=0;i<n;i++)
	{
	printf("enter numbre:");
	scanf("%d",&num);
	newnode=(node *)malloc(sizeof(node));
	newnode->data=num;
	temp->next=newnode;
	temp=newnode;
	newnode->next=list;
	}
	//newnode->next=list;
	return list;
	}
	int main()
	{
	int ch,n;
	node *list=NULL;
	do
	{
	printf("\n enter choice \n 1-create \n2 -disp\n 3-append:");
	scanf("%d",&ch);
	switch(ch)
	{
	case 1:list=create(list);
		break;
	case 2:disp(list);
		break;
	case 3:printf("enter number od elements to append:");
		scanf("%d",&n);
		list=append(list,n);
		break;
		}
}while(ch<4);
}
		
