// Implement a circular queue library (cir_queue.h) of integers using a dynamic (circular linked list) implementation of the queue and implementing init(Q), AddQueue(Q) and DeleteQueue(Q) operations. Write a menu driven
program that includes queue library and calls different queue operations.//




#define memory (struct node*)malloc(sizeof(struct node))
struct node
{
   int data;
   struct node *next;
}*front,*rear,*newnode,*temp;
void init()
{
	front=rear=NULL;
	}
	int isempty()
	{
	if(front==NULL)
	return 1;
	else
	return 0;
	}
	void insertq(int num)
	{
	newnode=memory;
	newnode->data=num;
	newnode->next=front;
	if(isempty())
	front=rear=newnode;
	else
	{
	rear->next=newnode;
	rear=newnode;
	newnode->next=front;
	printf("\n insert successfully:");
	}
}
	void delq()
	{
	int val;
	if(isempty())
	{
	printf("queue is underflow:");
	}
	else
	{
	temp=front;
	val=front->data;
	if(front->next==front)
	{
	free(front);
	}
	else
	{
	front=front->next;
	rear->next=front;
	free(temp);
	}
	printf("\n deleted value=%d",val);
	}
}
	void disp()
	{
	temp=front;
	do
	{
	printf("%d\t",temp->data);
	temp=temp->next;
	}while(temp!=front);
}




 // program file:-//

 #include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
#include"cirqueue.h"
int main()
	{
	int num,ch;
	init();
	do
	{
	printf("\n 1-insert \n 2-del\n 3-disp:");
	scanf("%d",&ch);
	switch(ch)
	{
	case 1:printf("enter number:");
		scanf("%d",&num);
		insertq(num);
		break;
	case 2:delq();
		break;
	case 3:disp();
		break;
	}
}while(ch<4);
}
